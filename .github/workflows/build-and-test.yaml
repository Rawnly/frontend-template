name: Build
on:
  workflow_dispatch:
  push:
    paths:
      - 'src/*'
      - '__tests__/*'
      - 'Dockerfile'
      - 'tsconfig.json'
      - 'vitest.config.ts'
    branches:
      - main
      - develop
      - 'feature/*'
      - 'hotfix/*'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Setup Node
        uses: actions/setup-node@v2
        with:
          version: '14.x'
      -
        name: Install dependencies
        run: yarn
      -
        name: Run Tests
        run: yarn test
      -
        name: Build
        run: yarn build
      -
        name: Upload Next Build
        uses: actions/upload-artifact@v2
        with:
          name: build
          retention-days: 7
          path: |
            .next
            public
  docker-push:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Repo metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data

      - name: Get Docker Tags
        id: prep
        run: |
          DOCKER_IMAGE=ghcr.io/${{ github.repository }}
          VERSION=noop
          BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$BRANCH

            if [[ "${{ github.event.repository.default_branch }}" == "$VERSION" ]]; then
              VERSION=latest
            fi
          fi

          TAGS="${DOCKER_IMAGE}:${VERSION}"

          if [ -z $BRANCH ]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:${BRANCH}"
          fi

          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          fi

          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download Artifacts
        id: download
        uses: actions/download-artifact@v2
        with:
          name: build
          path: .
      -
        name: Build Docker Image
        uses: docker/build-push-action@v2
        with:
          context: ${{ steps.download.outputs.download-path }}
          push: true
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).clone_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
